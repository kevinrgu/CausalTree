# lvls[tree.used$csplit[split.used, ] == 1] returns the value of the EM variable that goes to the left
val.sample.left  <- val.sample.used[val.sample.used[, col.ind] %in% lvls[tree.used$csplit[split.used, ] == 1], ]
val.sample.right <- val.sample.used[val.sample.used[, col.ind] %in% lvls[tree.used$csplit[split.used,] == 3], ]
if (tree.used$frame$var[h+1] != "<leaf>"){
last.left   <- list(val.sample.left)
} else{
last.left   <- NULL
}
# index of node to the right
which.right <- as.numeric(rownames(tree.used$frame)[h+1]) + 1
# if the next node is not a leaf, store current data as last.right
if (tree.used$frame$var[as.numeric(rownames(tree.used$frame)) == which.right] != "<leaf>"){
last.right[[right.ind]]   <- val.sample.right
right.ind <- right.ind + 1
}
f <- as.formula(paste0('Y ~ ', var.used, '*treat'))
lmod <- lm(f, data = val.sample.used)
t <- abs(coef(summary(lmod))[4,"t value"])
goodness.test <- goodness.test + t**2
} # End h
} # End if loop
# Calculating complexity value
complex.val <- rbind(complex.val, data.frame(complex.val = goodness.test - lambdas * numb.int,
lambda = lambdas,
pruning.step = m,
tree.size = ifelse(is.null(tree.used$splits), 0, nrow(tree.used$splits))))
#names(complex.val[[m]]) <- lambdas
} # End m loop
return (complex.val)
}
# Step 5: Conduct conditional average treatment effect.
CCIT(
filter(matched_synth_data, subsample == 'exploration'),
filter(matched_synth_data, subsample == 'validation'),
filter(matched_synth_data, subsample == 'inference'),
lambdas=c(1),
stopping.rule = TRUE
)
matched.inference.sample.outcomes
overall_effect <- lm(Y ~ treat + 1, data = matched.exploration.sample.outcomes)$coefficients["treat"]
parms.used <- list(
treat = matched.exploration.sample.outcomes$treat,
Y = matched.exploration.sample.outcomes$Y,
overall_effect = overall_effect
)
ulist.used <- define_u.list(stopping.rule = stopping.rule)
lists <- create.sequence(matched.exploration.sample.outcomes, ulist.used, parms.used)
stopping.rule <- TRUE
ulist.used <- define_u.list(stopping.rule = stopping.rule)
lists <- create.sequence(matched.exploration.sample.outcomes, ulist.used, parms.used)
tree.list <- lists[[1]]
g.h.list <- lists[[2]]
tree.sizes <- sapply(tree.list, function(t) {
ifelse(is.null(t$splits), 0, nrow(t$splits))
})
complex.vals <- evaluate.sequence(tree.list, matched.validation.sample.outcomes, matched.exploration.sample.outcomes, lambdas)
matched.validation.sample.outcomes <- filter(matched_synth_data, subsample == 'validation')
complex.vals <- evaluate.sequence(tree.list, matched.validation.sample.outcomes, matched.exploration.sample.outcomes, lambdas)
lambdas=c(1)
complex.vals <- evaluate.sequence(tree.list, matched.validation.sample.outcomes, matched.exploration.sample.outcomes, lambdas)
selected.tree.size <- complex.vals %>%
group_by(lambda) %>%
filter(complex.val == max(complex.val)) %>%
select(tree.size) %>%
ungroup()
selected.trees <- lapply(selected.tree.size$tree.size, function(s) {
tree.list[[which(tree.sizes == s)]]
})
names(selected.trees) <- lambdas
# determine which selected subgroup each inference observation is in. There are a number of packages that do this, but the most recent versions
# are not installed on the RCE
matched.inference.sample.subgroups <- lapply(
selected.trees,
function(t) {
matched.inference.sample.new <- matched.inference.sample.outcomes
matched.inference.sample.new$subgroup <- 0
leaf_nodes <- t$frame %>%
tibble::rownames_to_column() %>%
filter(var == "<leaf>") %>%
.$rowname %>%
as.numeric()
for (n in leaf_nodes) {
rule <- path.rpart(t, n)
if (nrow(t$frame) == 1) {
ind <- 1:nrow(matched.inference.sample.outcomes)
} else {
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, get(splitting_vars[i])], comparison_vals[i])
}) %>% apply(1, all)
}
matched.inference.sample.new[ind]$subgroup <- n
}
matched.inference.sample.new <- matched.inference.sample.new %>%
mutate_at(vars(subgroup), as.factor)
return(matched.inference.sample.new)
}
)
matched.inference.sample.outcomes = filter(matched_synth_data, subsample == 'inference')
# determine which selected subgroup each inference observation is in. There are a number of packages that do this, but the most recent versions
# are not installed on the RCE
matched.inference.sample.subgroups <- lapply(
selected.trees,
function(t) {
matched.inference.sample.new <- matched.inference.sample.outcomes
matched.inference.sample.new$subgroup <- 0
leaf_nodes <- t$frame %>%
tibble::rownames_to_column() %>%
filter(var == "<leaf>") %>%
.$rowname %>%
as.numeric()
for (n in leaf_nodes) {
rule <- path.rpart(t, n)
if (nrow(t$frame) == 1) {
ind <- 1:nrow(matched.inference.sample.outcomes)
} else {
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, get(splitting_vars[i])], comparison_vals[i])
}) %>% apply(1, all)
}
matched.inference.sample.new[ind]$subgroup <- n
}
matched.inference.sample.new <- matched.inference.sample.new %>%
mutate_at(vars(subgroup), as.factor)
return(matched.inference.sample.new)
}
)
selected.trees
splitting_vars
?get
matched.inference.sample.outcomes[, em2]
matched.inference.sample.outcomes[, 'em2']
matched.inference.sample.outcomes[, em2]
# determine which selected subgroup each inference observation is in. There are a number of packages that do this, but the most recent versions
# are not installed on the RCE
matched.inference.sample.subgroups <- lapply(
selected.trees,
function(t) {
matched.inference.sample.new <- matched.inference.sample.outcomes
matched.inference.sample.new$subgroup <- 0
leaf_nodes <- t$frame %>%
tibble::rownames_to_column() %>%
filter(var == "<leaf>") %>%
.$rowname %>%
as.numeric()
for (n in leaf_nodes) {
rule <- path.rpart(t, n)
if (nrow(t$frame) == 1) {
ind <- 1:nrow(matched.inference.sample.outcomes)
} else {
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, splitting_vars[i]], comparison_vals[i])
}) %>% apply(1, all)
}
matched.inference.sample.new[ind]$subgroup <- n
}
matched.inference.sample.new <- matched.inference.sample.new %>%
mutate_at(vars(subgroup), as.factor)
return(matched.inference.sample.new)
}
)
# determine which selected subgroup each inference observation is in. There are a number of packages that do this, but the most recent versions
# are not installed on the RCE
matched.inference.sample.subgroups <- lapply(
selected.trees,
function(t) {
matched.inference.sample.new <- matched.inference.sample.outcomes
matched.inference.sample.new$subgroup <- 0
leaf_nodes <- t$frame %>%
tibble::rownames_to_column() %>%
filter(var == "<leaf>") %>%
.$rowname %>%
as.numeric()
for (n in leaf_nodes) {
rule <- path.rpart(t, n)
if (nrow(t$frame) == 1) {
ind <- 1:nrow(matched.inference.sample.outcomes)
} else {
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
print(splitting_vars[i])
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, splitting_vars[i]], comparison_vals[i])
}) %>% apply(1, all)
}
matched.inference.sample.new[ind]$subgroup <- n
}
matched.inference.sample.new <- matched.inference.sample.new %>%
mutate_at(vars(subgroup), as.factor)
return(matched.inference.sample.new)
}
)
# determine which selected subgroup each inference observation is in. There are a number of packages that do this, but the most recent versions
# are not installed on the RCE
matched.inference.sample.subgroups <- lapply(
selected.trees,
function(t) {
matched.inference.sample.new <- matched.inference.sample.outcomes
matched.inference.sample.new$subgroup <- 0
leaf_nodes <- t$frame %>%
tibble::rownames_to_column() %>%
filter(var == "<leaf>") %>%
.$rowname %>%
as.numeric()
for (n in leaf_nodes) {
rule <- path.rpart(t, n)
if (nrow(t$frame) == 1) {
ind <- 1:nrow(matched.inference.sample.outcomes)
} else {
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
print(splitting_vars)
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, splitting_vars[i]], comparison_vals[i])
}) %>% apply(1, all)
}
matched.inference.sample.new[ind]$subgroup <- n
}
matched.inference.sample.new <- matched.inference.sample.new %>%
mutate_at(vars(subgroup), as.factor)
return(matched.inference.sample.new)
}
)
matched.inference.sample.outcomes[, 'em2']
matched.inference.sample.outcomes[, 'em1']
t <- selected.trees[[1]]
t
matched.inference.sample.new <- matched.inference.sample.outcomes
matched.inference.sample.new$subgroup <- 0
leaf_nodes <- t$frame %>%
tibble::rownames_to_column() %>%
filter(var == "<leaf>") %>%
.$rowname %>%
as.numeric()
for (n in leaf_nodes) {
rule <- path.rpart(t, n)
if (nrow(t$frame) == 1) {
ind <- 1:nrow(matched.inference.sample.outcomes)
} else {
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
print(splitting_vars)
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, splitting_vars[i]], comparison_vals[i])
}) %>% apply(1, all)
}
matched.inference.sample.new[ind]$subgroup <- n
}
n <- leaf_nodes[1]
n
rule <- path.rpart(t, n)
rule
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
print(splitting_vars)
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, splitting_vars[i]], comparison_vals[i])
}) %>% apply(1, all)
leaf_nodes
n <- 5
nrow(t$frame)
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
print(splitting_vars)
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, splitting_vars[i]], comparison_vals[i])
}) %>% apply(1, all)
n <- 6
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
print(splitting_vars)
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, splitting_vars[i]], comparison_vals[i])
}) %>% apply(1, all)
n <- 7
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
print(splitting_vars)
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, splitting_vars[i]], comparison_vals[i])
}) %>% apply(1, all)
matched.inference.sample.new[ind]$subgroup <- n
matched.inference.sample.new
matched.inference.sample.new[ind]
matched.inference.sample.new[ind, ]$subgroup <- n
CCIT <- function(matched.exploration.sample.outcomes = NULL, matched.validation.sample.outcomes = NULL, matched.inference.sample.outcomes = NULL,
lambdas, stopping.rule) {
overall_effect <- lm(Y ~ treat + 1, data = matched.exploration.sample.outcomes)$coefficients["treat"]
parms.used <- list(
treat = matched.exploration.sample.outcomes$treat,
Y = matched.exploration.sample.outcomes$Y,
overall_effect = overall_effect
)
ulist.used <- define_u.list(stopping.rule = stopping.rule)
lists <- create.sequence(matched.exploration.sample.outcomes, ulist.used, parms.used)
tree.list <- lists[[1]]
g.h.list <- lists[[2]]
tree.sizes <- sapply(tree.list, function(t) {
ifelse(is.null(t$splits), 0, nrow(t$splits))
})
complex.vals <- evaluate.sequence(tree.list, matched.validation.sample.outcomes, matched.exploration.sample.outcomes, lambdas)
selected.tree.size <- complex.vals %>%
group_by(lambda) %>%
filter(complex.val == max(complex.val)) %>%
select(tree.size) %>%
ungroup()
selected.trees <- lapply(selected.tree.size$tree.size, function(s) {
tree.list[[which(tree.sizes == s)]]
})
names(selected.trees) <- lambdas
# determine which selected subgroup each inference observation is in. There are a number of packages that do this, but the most recent versions
# are not installed on the RCE
matched.inference.sample.subgroups <- lapply(
selected.trees,
function(t) {
matched.inference.sample.new <- matched.inference.sample.outcomes
matched.inference.sample.new$subgroup <- 0
leaf_nodes <- t$frame %>%
tibble::rownames_to_column() %>%
filter(var == "<leaf>") %>%
.$rowname %>%
as.numeric()
for (n in leaf_nodes) {
rule <- path.rpart(t, n)
if (nrow(t$frame) == 1) {
ind <- 1:nrow(matched.inference.sample.outcomes)
} else {
rule_2 <- sapply(rule[[1]][-1], function(x) strsplit(x, "(?<=[><=])(?=[^><=])|(?<=[^><=])(?=[><=])", perl = TRUE))
splitting_vars <- sapply(rule_2, function(rule) {
rule[1]
})
comparison_operators <- sapply(rule_2, function(rule) {
ifelse(rule[2] == "=", "==", rule[2])
})
comparison_vals <- sapply(rule_2, function(rule) {
rule[3]
})
print(splitting_vars)
ind <- sapply(seq(length(rule_2)), function(i) {
get(comparison_operators[i])(matched.inference.sample.outcomes[, splitting_vars[i]], comparison_vals[i])
}) %>% apply(1, all)
}
matched.inference.sample.new[ind, ]$subgroup <- n
}
matched.inference.sample.new <- matched.inference.sample.new %>%
mutate_at(vars(subgroup), as.factor)
return(matched.inference.sample.new)
}
)
# estimate treatment effects on the inference subsample by fitting linear models within each selected subgroup
est.treatment.effects <- lapply(
matched.inference.sample.subgroups,
function(df) {
df %>%
group_by(subgroup) %>%
do(model = lm(Y ~ treat + 1, data = .)) %>%
mutate(est = summary(model)$coefficients["treat", 1]) %>%
right_join(df, by = "subgroup")
}
)
return(list(est.treatment.effects = est.treatment.effects, selected.trees = selected.trees, tree.list = tree.list, selected.tree.size = selected.tree.size))
}
# Step 5: Conduct conditional average treatment effect.
CCIT(
filter(matched_synth_data, subsample == 'exploration'),
matched.validation.sample.outcomes <- filter(matched_synth_data, subsample == 'validation'),
matched.inference.sample.outcomes = filter(matched_synth_data, subsample == 'inference'),
lambdas=c(1),
stopping.rule = TRUE
)
# Step 5: Conduct conditional average treatment effect.
CCIT(
filter(matched_synth_data, subsample == 'exploration'),
matched.validation.sample.outcomes = filter(matched_synth_data, subsample == 'validation'),
matched.inference.sample.outcomes = filter(matched_synth_data, subsample == 'inference'),
lambdas=c(1),
stopping.rule = TRUE
)
# Step 1: Generate a synthetic data set.
## Step 1a: Generate covariates and treatment
synth_data_covs <- generate_syn_data_covs(sample_size = 10000, gps_spec = 2)
# Step 1: Generate a synthetic data set.
## Step 1a: Generate covariates and treatment
synth_data_covs <- generate_syn_data_covs(sample_size = 10000, gps_spec = 2)
# source_dir <- '/Users/ninakatz-christy/CCIT_Final_refactored/CCIT'
# dir_out <- '/Users/ninakatz-christy/Documents/CCIT/Code/CCIT/simulated_data_09122022/'
# source(paste0(source_dir, '/_R/evaluate.sequence.R'))
# source(paste0(source_dir, '/_R/run_simu.R'))
# source(paste0(source_dir, '/_R/create.sequence.R'))
# source(paste0(source_dir, '/_R/rpart_funcs.R'))
# source(paste0(source_dir, '/_R/stratified_GPS_matching.R'))
# source(paste0(source_dir, '/_R/split_dataset.R'))
source(paste0(source_dir, '/_R/generate_synthetic_data_covs.R'))
# source_dir <- '/Users/ninakatz-christy/CCIT_Final_refactored/CCIT'
# dir_out <- '/Users/ninakatz-christy/Documents/CCIT/Code/CCIT/simulated_data_09122022/'
# source(paste0(source_dir, '/_R/evaluate.sequence.R'))
# source(paste0(source_dir, '/_R/run_simu.R'))
# source(paste0(source_dir, '/_R/create.sequence.R'))
# source(paste0(source_dir, '/_R/rpart_funcs.R'))
# source(paste0(source_dir, '/_R/stratified_GPS_matching.R'))
# source(paste0(source_dir, '/_R/split_dataset.R'))
source(paste0('/_R/generate_synthetic_data_covs.R'))
# set this to the directory with source code
source_dir <- '/Users/ninakatz-christy/CCIT_Final_refactored/CCIT'
# dir_out <- '/Users/ninakatz-christy/Documents/CCIT/Code/CCIT/simulated_data_09122022/'
# source(paste0(source_dir, '/_R/evaluate.sequence.R'))
# source(paste0(source_dir, '/_R/run_simu.R'))
# source(paste0(source_dir, '/_R/create.sequence.R'))
# source(paste0(source_dir, '/_R/rpart_funcs.R'))
# source(paste0(source_dir, '/_R/stratified_GPS_matching.R'))
# source(paste0(source_dir, '/_R/split_dataset.R'))
source(paste0(source_dir, '/_R/generate_synthetic_data_covs.R'))
# dir_out <- '/Users/ninakatz-christy/Documents/CCIT/Code/CCIT/simulated_data_09122022/'
# source(paste0(source_dir, '/_R/evaluate.sequence.R'))
# source(paste0(source_dir, '/_R/run_simu.R'))
# source(paste0(source_dir, '/_R/create.sequence.R'))
# source(paste0(source_dir, '/_R/rpart_funcs.R'))
# source(paste0(source_dir, '/_R/stratified_GPS_matching.R'))
# source(paste0(source_dir, '/_R/split_dataset.R'))
source(paste0(source_dir, '/R/generate_synthetic_data_covs.R'))
# Step 1: Generate a synthetic data set.
## Step 1a: Generate covariates and treatment
synth_data_covs <- generate_syn_data_covs(sample_size = 10000, gps_spec = 2)
## Step 1b: Determine covariate balance
absolute_corr_fun(as.data.table(synth_data_covs$treat), as.data.table(synth_data_covs[c('cf1', 'cf2', 'cf3', 'cf4', 'cf5', 'cf6')]))
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
